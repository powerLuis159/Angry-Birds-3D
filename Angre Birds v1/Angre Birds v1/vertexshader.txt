#version 410 core

// Información de entrada de los vértices. Es diferente para cada una de las ejecuciones de este shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;
// Valores de salida ; serán interpolados para cada fragmento.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normal_cameraspace;
// Valores que permanecen constantes para toda la malla. .
uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 LightPosition_worldspace;
uniform vec3 camera_worlspace;
void main(){
	
    // Posición de salida del vértice. En el espacio clip: MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	//posicion del vertice M*position
	Position_worldspace=(M*vec4(vertexPosition_modelspace,1)).xyz;

	//vector que va desde el vertice a la camara
	vec3 vertexPosition_cameraspace=(V*M*vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace=vec3(0,0,0)-vertexPosition_cameraspace;

	//vector que vas desde el vertice a la luz
	vec3 LightPosition_cameraspace=(V*vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace=LightPosition_cameraspace+EyeDirection_cameraspace;

	//Normal de la vertice
	Normal_cameraspace=(V*M*vec4(vertexNormal_modelspace,0)).xyz;

    // UV de los vértices. No se necesita un espacio especial para esta línea.
    UV = vertexUV;
}